1.	JSX(javascript XML):-->

    syntax extension to javascript
    allows embedding of HTML within JS code
	we can use it with react to describe or design easy with html like tags
	it has template like html but has full power of javascript with it
	it produce react elements like div,h1 , img  a etc even custom build elements
    it is an expression too
    --it prevent injection attacks as {} this does the sanities the html before binding it
            How jsx prevent injection attacks
            1.	jsx escape special characters: <div>Hello {name}</div>
            if name = "John & Mary" then output will be Hello John &amp; Mary
            2.	jsx automatically escapes any values embedded in curly braces {}
            so no need for us to manually encode them
            does it sanities the html and how?
            yes, when we write something between {}, it gets converted into string by using .toString() method
            so all special characters are escaped

Q. 2 superpower of JSX:-->
    	we can write logic and markup in single file
        its easy to maintain and debug
    	it allows us to write html elements in js and place them in DOM without any use of createElement or appendChild methods 
	 it convert HTML tags into react element in background
     3.	jsx support self closing tag 
     4.	jsx support multiline string without using backslashes \
     e.g. const str=<p>hello world</p>;
     console.log(str); //[object Object]
     ReactDOM.render(str,document.getElementById('root'));

Q. 3	role of TYPE attribute in script tag?

    type attribute specify the type of script file we are adding.
    it indentify the content between scripts tags
	default value is text/js as script tag is used to embedded js with html
	text/ecmascript: it indicates that it follows ecma standards
	module: it tells the document that it can import and export the files or modules
	babel: it indicates it is babel type or required  babel to transpile it
	typescript:it indicate that file type is typescript

Q.4 	{TitleComponent} Vs {<TitleComponent/>} Vs 
    	{TitleComponent}:it describe its as a JS expression or variable as we can write js expression or variable inside it
	{<TitleComponent/>}  :when a component is returned or called with some JSX values where props can be passed
	{<TitleComponent><TitleComponent/>}:its equivalent to 2nd one until it has no child components .






    2.	React: -->
    library for building user interfaces
    uses JSX and components
    3.	Components: -->
    smallest units of UI in React apps
